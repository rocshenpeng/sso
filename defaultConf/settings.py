"""
Django settings for sso project.

Generated by 'django-admin startproject' using Django 2.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
from defaultConf import customConfigs

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'r*i2lp83m&s%b_m1j8cchasu%1arv6tuzwpft&stz^+@n^hn&k'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.staticfiles',
    'rest_framework',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ORIGIN_ALLOW_ALL = True
CSRF_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = ['*']
CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'POST',
    'PUT',
)
CORS_ALLOW_HEADERS = (
    "access-token",
    "tmp-token",
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
)

ROOT_URLCONF = 'defaultConf.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'defaultConf.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': getattr(customConfigs, 'MYSQL_ADDRESS', 'localhost'),
        'PORT': getattr(customConfigs, 'MYSQL_PORT', 3306),
        'NAME': getattr(customConfigs, 'MYSQL_DATABASE', 'sso'),
        'USER': getattr(customConfigs, 'MYSQL_USERNAME', 'root'),
        'PASSWORD': getattr(customConfigs, 'MYSQL_PASSWORD', None),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

REDIS_PASSWORD = getattr(customConfigs, 'REDIS_PASSWORD', None)
REDIS_HOST = getattr(customConfigs, 'REDIS_HOST', 'localhost')
REDIS_PORT = getattr(customConfigs, 'REDIS_PORT', 6379)
REDIS_DATABASE = getattr(customConfigs, 'REDIS_DATABASE', 0)

REDIS_AUTH_STRING = ":{}@".format(REDIS_PASSWORD) if ("REDIS_PASSWORD" in locals().keys()) and REDIS_PASSWORD else ""
REDIS_CONNECTION_URL = "redis://{}{}:{}/{}".format(REDIS_AUTH_STRING, REDIS_HOST, REDIS_PORT, REDIS_DATABASE)

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_CONNECTION_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

AUTHENTICATION_BACKENDS = (
    'core.libs.backends.LDAPAuthBackend',
)

# ldap相关配置
LDAP_HOST = getattr(customConfigs, 'LDAP_HOST', 'localhost')
LDAP_PORT = getattr(customConfigs, 'LDAP_PORT', 389)
LDAP_SEARCH_BASE = getattr(customConfigs, 'LDAP_SEARCH_BASE', None)
LDAP_ADMIN_DN = getattr(customConfigs, 'LDAP_ADMIN_DN', None)
LDAP_ADMIN_PASSWORD = getattr(customConfigs, 'LDAP_ADMIN_PASSWORD', None)

AUTH_USER_MODEL = "core.User"

SUPER_USERNAME_LIST = getattr(customConfigs, 'SUPER_USERNAME_LIST')
